//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jhu.SkyQuery.Sql.Jobs.Query {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class BayesFactorXMatchScripts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal BayesFactorXMatchScripts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Jhu.SkyQuery.Sql.Jobs.Query.BayesFactorXMatchScripts", typeof(BayesFactorXMatchScripts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/BuildMatchTableIndex.sql *** ---
        ///
        ///CREATE INDEX [$indexname]
        ///ON [$tablename] ( ZoneID, Ra )
        ///INCLUDE 
        ///(
        ///	[Dec], [Cx], [Cy], [Cz]
        ///	[$columnlist]
        ///).
        /// </summary>
        internal static string BuildMatchTableIndex {
            get {
                return ResourceManager.GetString("BuildMatchTableIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/ComputeRSquared.sql *** ---
        ///
        ///DECLARE @r dbo.Region = @region;
        ///
        ///WITH __t AS
        ///(
        ///[$query]
        ///)
        ///SELECT MAX(skyquery.BayesFactorCalcSearchRadius(
        ///	a, l, q, @weightMin, @amin, @lmax, @stepCount, @limit))
        ///FROM __t.
        /// </summary>
        internal static string ComputeRSquared {
            get {
                return ResourceManager.GetString("ComputeRSquared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/CreateMatchTable.sql *** ---
        ///
        ///CREATE TABLE [$tablename]
        ///(
        ///	   [MatchID] [bigint] NOT NULL IDENTITY ([$idseed], 1),
        ///	   [RA] [float],
        ///	   [Dec] [float],
        ///	   [Cx] [float],
        ///	   [Cy] [float],
        ///	   [Cz] [float],
        ///	   [n] [smallint],
        ///	   [a] [float],
        ///	   [l] [float],
        ///	   [q] [float],
        ///	   [logBF] [float],
        ///	   [ZoneID] [int]
        ///	   [$columnlist]
        ///)
        ///
        ///ALTER TABLE [$tablename] ADD CONSTRAINT [$indexname] PRIMARY KEY ( [MatchID] ).
        /// </summary>
        internal static string CreateMatchTable {
            get {
                return ResourceManager.GetString("CreateMatchTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/PopulateMatchTable.sql *** ---
        ///
        ///WITH 
        ///__t1 AS
        ///(
        ///[$query1]
        ///),
        ///__t2 AS
        ///(
        ///[$query2]
        ///),
        ///__match AS
        ///(
        ///	SELECT skyquery.BayesFactorCalcPosition(
        ///				__t1.[Cx], __t1.[Cy], __t1.[Cz], 
        ///				__t1.[n],
        ///				__t1.[a],
        ///				__t1.[l],
        ///				__t1.[q],
        ///				__t2.[Cx], __t2.[Cy], __t2.[Cz],
        ///				__t2.[a],
        ///				@stepNumber,
        ///				@amax,
        ///				@lmin,
        ///				@stepCount,
        ///				@limit) AS __calc
        ///			[$columnlist1]
        ///	FROM [$pairtable] AS __pair
        ///	INNER JOIN __t1 ON [$tablejoin1]
        ///	INNER  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PopulateMatchTable {
            get {
                return ResourceManager.GetString("PopulateMatchTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 	SELECT [$zoneid] AS [ZoneID],
        ///	       [$ra] AS [RA],
        ///	       [$dec] AS [Dec],
        ///	       [$cx] AS [Cx],
        ///	       [$cy] AS [Cy],
        ///	       [$cz] AS [Cz],
        ///	       [$htmid] AS [HtmID],
        ///	       CAST(1 AS smallint) AS [n],
        ///	       [$weight] AS [a],				-- 1/sigma^2 of Eq. 12
        ///	       LOG([$weight]) AS [l],			-- 
        ///	       CAST(0 AS float) AS [q],			-- Eq. 39
        ///	       CAST(0 AS float) AS [logBF]		-- ln(N) of Eq. 33
        ///	       [$columnlist]
        ///	FROM [$tablename]
        ///	[$where].
        /// </summary>
        internal static string SelectAugmentedTable {
            get {
                return ResourceManager.GetString("SelectAugmentedTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 	SELECT [$zoneid] AS [ZoneID],
        ///	       [$ra] AS [RA],
        ///	       [$dec] AS [Dec],
        ///	       [$cx] AS [Cx],
        ///	       [$cy] AS [Cy],
        ///	       [$cz] AS [Cz],
        ///	       [$htmid] AS [HtmID],
        ///	       CAST(1 AS smallint) AS [n],
        ///	       [$weight] AS [a],
        ///	       LOG([$weight]) AS [l],
        ///	       CAST(0 AS float) AS [q],
        ///	       CAST(0 AS float) AS [logBF]
        ///	       [$columnlist]
        ///	FROM htm.Cover(@r) __htm
        ///	INNER LOOP JOIN [$tablename]
        ///		ON [$htmid] BETWEEN __htm.htmIDStart AND __htm.htmIDEnd AND __htm.partial = 0        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SelectAugmentedTableHtm {
            get {
                return ResourceManager.GetString("SelectAugmentedTableHtm", resourceCulture);
            }
        }
    }
}
