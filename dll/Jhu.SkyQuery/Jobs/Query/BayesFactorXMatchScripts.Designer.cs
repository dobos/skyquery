//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jhu.SkyQuery.Jobs.Query {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class BayesFactorXMatchScripts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal BayesFactorXMatchScripts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Jhu.SkyQuery.Jobs.Query.BayesFactorXMatchScripts", typeof(BayesFactorXMatchScripts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/BuildMatchTableIndex.sql *** ---
        ///
        ///CREATE INDEX [$indexname]
        ///ON [$tablename] ( ZoneID, Ra )
        ///INCLUDE ([Dec], [Cx], [Cy], [Cz], [$columnlist]).
        /// </summary>
        internal static string BuildMatchTableIndex {
            get {
                return ResourceManager.GetString("BuildMatchTableIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/ComputeRSquared.sql *** ---
        ///
        ///SELECT ISNULL(MAX( (1 / a + 1 / @weightMin) * (2 * (@factor + l + @lmax - LOG(a + @amin) - @limit) - q) ), 0.0000000000)
        ///FROM [$matchtable].
        /// </summary>
        internal static string ComputeRSquared {
            get {
                return ResourceManager.GetString("ComputeRSquared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/CreateMatchTable.sql *** ---
        ///
        ///CREATE TABLE [$tablename]
        ///(
        ///	   [MatchID] [bigint] NOT NULL IDENTITY (1, 1),
        ///	   [RA] [float],
        ///	   [Dec] [float],
        ///	   [Cx] [float],
        ///	   [Cy] [float],
        ///	   [Cz] [float],
        ///	   [a] [float],
        ///	   [l] [float],
        ///	   [q] [float],
        ///	   [logBF] [float],
        ///	   [ZoneID] [int],
        ///	   [$columnlist]
        ///)
        ///
        ///ALTER TABLE [$tablename] ADD CONSTRAINT [$indexname] PRIMARY KEY ( [MatchID] ).
        /// </summary>
        internal static string CreateMatchTable {
            get {
                return ResourceManager.GetString("CreateMatchTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/CreateZoneTable.sql *** ---
        ///
        ///CREATE TABLE [$tablename]
        ///(
        ///	[ZoneID] int NOT NULL,
        ///	[RA] float NOT NULL,
        ///	[Dec] float NOT NULL,
        ///	[Cx] float NOT NULL,
        ///	[Cy] float NOT NULL,
        ///	[Cz] float NOT NULL,
        ///	[$columnlist]
        ///)
        ///
        ///CREATE CLUSTERED INDEX [$indexname] ON [$tablename] ([ZoneID], [RA]).
        /// </summary>
        internal static string CreateZoneTable {
            get {
                return ResourceManager.GetString("CreateZoneTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/PopulateInitialMatchTable.sql *** ---
        ///
        ///INSERT [$newtablename] WITH (TABLOCKX)
        ///       ([RA], [Dec], [Cx], [Cy], [Cz], [a], [l], [q], [logBF], [ZoneID], [$insertcolumnlist])
        ///SELECT [$ra] AS [RA],
        ///       [$dec] AS [Dec],
        ///       [$cx] AS [Cx],
        ///       [$cy] AS [Cy],
        ///       [$cz] AS [Cz],
        ///       [$weight] AS [a],
        ///       LOG([$weight]) AS [l],
        ///       0 AS [q],
        ///       ([$n] - 1) * LOG(2) AS [logBF],
        ///       CONVERT(INT,FLOOR(([$dec] + 90.0) / @H)) as [ZoneID],
        ///       [ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PopulateInitialMatchTable {
            get {
                return ResourceManager.GetString("PopulateInitialMatchTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/PopulateLinkTable.sql *** ---
        ///
        ///DECLARE @nzone int = CONVERT(int, FLOOR(@theta/@h) + 1)
        ///
        ///INSERT [$tablename] WITH (TABLOCKX)
        ///SELECT [Z1].[ZoneID], [Z2].[ZoneID], 
        ///	SkyQuery_Code.dbo.CalculateAlpha(@theta, [D1].[DecMin], [D1].[DecMax], @H),
        ///	SkyQuery_Code.dbo.CalculateAlpha(@theta, [D2].[DecMin], [D2].[DecMax], @H)
        ///FROM       (SELECT DISTINCT [ZoneID] FROM [$zonetable1]) AS [Z1]
        ///INNER JOIN (SELECT DISTINCT [ZoneID] FROM [$zonetable2]) AS [Z2]
        ///      ON [Z2].[ZoneID]  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PopulateLinkTable {
            get {
                return ResourceManager.GetString("PopulateLinkTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/PopulateMatchTable.sql *** ---
        ///
        ///INSERT [$newtablename] WITH (TABLOCKX)
        ///	([RA], [Dec], [Cx], [Cy], [Cz], [a], [l], [q], [logBF], [$insertcolumnlist])
        ///SELECT
        ///	t.calc.Ra, t.calc.Dec,
        ///	t.calc.Cx, t.calc.Cy, t.calc.Cz,
        ///	t.calc.A,
        ///	t.calc.L,
        ///	q + t.calc.dQ,
        ///	t.calc.LogBF,
        ///	[$selectcolumnlist2]
        ///FROM
        ///(
        ///	SELECT  [tableA].[q] AS q,
        ///			[SkyQuery_Code].dbo.BayesFactorCalcPosition([tableA].[Cx], [tableA].[Cy], [tableA].[Cz],  [tableA].[a], [tableA].[l], [tableA].[logBF],  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PopulateMatchTable {
            get {
                return ResourceManager.GetString("PopulateMatchTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/PopulatePairTable.sql *** ---
        ///
        ///DECLARE @dist2 float = 4 * POWER(SIN(RADIANS(@theta/2)), 2);
        ///--
        ///INSERT [$pairtable] WITH (TABLOCKX)
        ///SELECT	[$columnlist1],
        ///		[$columnlist2],
        ///		[tableB].[Cx] - [tableA].[Cx],
        ///		[tableB].[Cy] - [tableA].[Cy],
        ///		[tableB].[Cz] - [tableA].[Cz]
        ///FROM [$matchzonetable] AS [tableA]
        ///INNER LOOP JOIN [$linktable] AS [linktable] ON [linktable].ZoneID1 = [tableA].ZoneID
        ///INNER LOOP JOIN [$zonetable] AS [tableB] ON [linktable].ZoneID2 = [tableB].Z [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PopulatePairTable {
            get {
                return ResourceManager.GetString("PopulatePairTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- *** BayesFactorXMatchResources/PopulateZoneTable.sql *** ---
        ///
        ///INSERT [$zonetablename] WITH (TABLOCKX)
        ///SELECT CONVERT(INT,FLOOR(([$dec] + 90.0) / @H)) as [ZoneID],
        ///       [$ra] AS [RA],
        ///       [$dec] AS [Dec],
        ///       [$cx] AS [Cx],
        ///       [$cy] AS [Cy],
        ///       [$cz] AS [Cz],
        ///       [$columnlist]
        ///FROM [$tablename] AS [$tablealias] WITH (NOLOCK)
        ///[$where]
        ///ORDER BY [ZoneID], [RA]
        ///
        ///-- Add wrap-around
        ///
        ///INSERT [$zonetablename] WITH (TABLOCKX)
        ///SELECT [t].[ZoneID],
        ///       [t].[RA] - 360,
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PopulateZoneTable {
            get {
                return ResourceManager.GetString("PopulateZoneTable", resourceCulture);
            }
        }
    }
}
